# Azure Pipeline YAML file

trigger:
  branches:
    include:
    - master
  tags:
    include:
    - '*'

variables:
  BuildPlatform: x86
  BuildConfiguration: Release
  _BUILD_BRANCH: $(Build.SourceBranch)

pool:
  vmImage: 'windows-2019'

resources:
  repositories:
  - repository: highly_experimental
    type: github
    endpoint: myst6re
    name: myst6re/highly_experimental
  - repository: psflib
    type: github
    endpoint: myst6re
    name: myst6re/psflib

steps:
- checkout: self
- checkout: highly_experimental
  path: 's\openpsf\highly_experimental'
- checkout: psflib
  path: 's\openpsf\psflib'
- task: PowerShell@2
  displayName: 'Prepare Env'
  inputs:
    filePath: $(Build.Repository.LocalPath)\openpsf\.ci\prepare.ps1
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.Repository.LocalPath)\openpsf\.ci'
    contents: 'zlib.vcxproj'
    targetFolder: '$(Build.Repository.LocalPath)\zlib'
    cleanTargetFolder: false
- task: VSBuild@1
  displayName: 'Build and Package $(Build.Repository.Name)'
  inputs:
    solution: $(Build.Repository.LocalPath)\openpsf\openpsf.sln
    vsVersion: '16.0'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.Repository.LocalPath)\openpsf\$(BuildConfiguration)'
    contents: 'psflib.lib'
    targetFolder: '$(Build.Repository.LocalPath)\output\lib'
    cleanTargetFolder: true
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.Repository.LocalPath)\openpsf\$(BuildConfiguration)'
    contents: 'PSXCore.lib'
    targetFolder: '$(Build.Repository.LocalPath)\output\lib'
    cleanTargetFolder: false
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.Repository.LocalPath)\openpsf\$(BuildConfiguration)'
    contents: 'openpsf.lib'
    targetFolder: '$(Build.Repository.LocalPath)\output\lib'
    cleanTargetFolder: false
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.Repository.LocalPath)\openpsf\src'
    contents: '*.h'
    targetFolder: '$(Build.Repository.LocalPath)\output\include\libopenpsf'
    cleanTargetFolder: true
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.Repository.LocalPath)\openpsf\psflib'
    contents: 'psflib.h'
    targetFolder: '$(Build.Repository.LocalPath)\output\include'
    cleanTargetFolder: false
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)\output'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\openpsf-$(Build.SourceBranchName).$(Build.BuildId)_$(BuildConfiguration)_$(BuildPlatform).zip'
    replaceExistingArchive: true
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)\output'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\openpsf-$(Build.SourceBranchName)_$(BuildConfiguration)_$(BuildPlatform).zip'
    replaceExistingArchive: true
- task: GitHubRelease@0
  condition: and(or(eq(variables._BUILD_BRANCH, 'refs/heads/master'), eq(variables._BUILD_BRANCH, 'refs/tags/canary')), not(contains(variables._BUILD_BRANCH, 'refs/pull/')))
  displayName: 'Delete $(Build.Repository.Name) Release (Canary)'
  continueOnError: true
  inputs:
    gitHubConnection: github_ci
    action: delete
    tagSource: manual
    tag: canary
- task: GitHubRelease@0
  condition: and(or(eq(variables._BUILD_BRANCH, 'refs/heads/master'), eq(variables._BUILD_BRANCH, 'refs/tags/canary')), not(contains(variables._BUILD_BRANCH, 'refs/pull/')))
  displayName: 'Create $(Build.Repository.Name) Release (Canary)'
  inputs:
    gitHubConnection: github_ci
    assets: '$(Build.ArtifactStagingDirectory)\openpsf-$(Build.SourceBranchName).$(Build.BuildId)_$(BuildConfiguration)_$(BuildPlatform).zip'
    isPreRelease: true
    tagSource: manual
    tag: canary
    title: openpsf-$(Build.SourceBranchName)
    releaseNotesSource: input
    releaseNotes: |
      This is a canary build. Please be aware it may be prone to crashing and is NOT tested by anyone. Use this build AT YOUR OWN RISK!
- task: GitHubRelease@0
  condition: and(not(or(eq(variables._BUILD_BRANCH, 'refs/heads/master'), eq(variables._BUILD_BRANCH, 'refs/tags/canary'))), not(contains(variables._BUILD_BRANCH, 'refs/pull/')))
  displayName: 'Create $(Build.Repository.Name) Release (Stable)'
  inputs:
    gitHubConnection: github_ci
    assets: '$(Build.ArtifactStagingDirectory)\openpsf-$(Build.SourceBranchName)_$(BuildConfiguration)_$(BuildPlatform).zip'
    title: openpsf-$(Build.SourceBranchName)
